@using Shared.ApiModels
@using Shared.Enums
@using Microsoft.Extensions.Localization
@using Client.Translations
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Dictionary> Localizer
@page "/"

<PageTitle>@Localizer[nameof(Dictionary.Home)]</PageTitle>

<h1>@Localizer[nameof(Dictionary.Home)] - @Localizer[nameof(Dictionary.LateVehicles)]</h1>


@if (_vehicles == null)
{
    <p><em>@Localizer[nameof(Dictionary.Loading)]...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>@Localizer[nameof(Dictionary.Brand)]</th>
                <th>@Localizer[nameof(Dictionary.Model)]</th>
                <th>@Localizer[nameof(Dictionary.Registration)]</th>
                <th>@Localizer[nameof(Dictionary.Late)]</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in _vehicles)
            {
                <tr>
                    <td>@vehicle.VehicleModel.Brand</td>
                    <td>@vehicle.VehicleModel.Name</td>
                    <td>@vehicle.Immatriculation</td>
                    <td>@vehicle.NextMaintenanceDelta km</td>
                </tr>
            }
        </tbody>

    </table>
}

@code {

    private enum ModalMode
    {
        Add,
        Closed
    }

    private ModalMode _modalMode = ModalMode.Closed;

    private VehicleApiModel? _selectedVehicle;

    public VehicleCreateApiModel modalVehicle { get; set; } = new VehicleCreateApiModel();

    private IList<VehicleApiModel>? _vehicles;
    private IList<VehicleModelApiModel>? _vehicleModels;

    protected override async Task OnInitializedAsync()
    {
        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleApiModel>>("api/Vehicle/Late");
        _vehicleModels = await HttpClient.GetFromJsonAsync<IList<VehicleModelApiModel>>("api/VehicleModel");
    }

}
