@page "/vehicles"
@using Shared.ApiModels
@using Shared.Enums
@using Microsoft.Extensions.Localization
@using Client.Translations
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Dictionary> Localizer

<PageTitle>@Localizer[nameof(Dictionary.Vehicle)]</PageTitle>

<h1>@Localizer[nameof(Dictionary.Vehicle)]</h1>


@if(_vehicles == null)
{
<p><em>@Localizer[nameof(Dictionary.Loading)]...</em></p>
}
else
{
    <button class="btn btn-primary"
                @onclick="@(OpenAddPopup)">@Localizer[nameof(Dictionary.Add)]</button>
    <table class="table">
        <thead>
        <tr>
            <th>@Localizer[nameof(Dictionary.Brand)]</th>
            <th>@Localizer[nameof(Dictionary.Model)]</th>
            <th>@Localizer[nameof(Dictionary.Registration)]</th>
            <th>@Localizer[nameof(Dictionary.Actions)]</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var vehicle in _vehicles)
        {
            <tr>
                <td>@vehicle.VehicleModel.Brand</td>
                <td>@vehicle.VehicleModel.Name</td>
                <td>@vehicle.Immatriculation</td>
                <td>
                    <button class="btn btn-danger" 
                            @onclick="@(()=>OnDelete(vehicle))">@Localizer[nameof(Dictionary.Delete)]</button>
                </td>
            </tr>
        }
        </tbody>

    </table>

        <div class="modal fade show " id="myModal" style=" display: @(_modalMode==ModalMode.Closed? "none":"block");">
            <div class="modal-dialog bg-light" role="document">
                <div class="modal-content">
                    <div class="modal-header d-flex flex-column">
                        @if (_modalMode == ModalMode.Add)
                        {
                            <h3>@Localizer[nameof(Dictionary.CreateNew)] @Localizer[nameof(Dictionary.Vehicle)]</h3>
                            <div class="modal-body d-flex flex-column">
                                <label for="modal-name">@Localizer[nameof(Dictionary.Registration)]</label>
                                <input id="modal-name" @bind="@modalVehicle.Immatriculation" placeholder="AA-111-AA"/>

                                <label for="modal-year">@Localizer[nameof(Dictionary.Year)]</label>
                                <input id="modal-year" @bind="@modalVehicle.Year" placeholder="2010" />

                                <label for="modal-kilometers">@Localizer[nameof(Dictionary.Kilometers)]</label>
                                <input id="modal-kilometers" @bind="@modalVehicle.Kilometers" placeholder="10500" />

                                <label for="modal-fueltype">@Localizer[nameof(Dictionary.FuelType)]</label>
                                <InputSelect id="modal-fueltype" @bind-Value="@modalVehicle.FuelType">
                                    @foreach (var fuelType in Enum.GetValues(typeof(VehicleFuelType)))
                                    {
                                        <option value="@fuelType">@fuelType</option>
                                    }
                                </InputSelect>

                                <label for="modal-vehiclemodel">@Localizer[nameof(Dictionary.Model)]</label>
                                <InputSelect id="modal-vehiclemodel" @bind-Value="@modalVehicle.VehicleModelId">
									@foreach (var vehicleModel in _vehicleModels)
									{
										<option value="@vehicleModel.Id">@vehicleModel.Brand @vehicleModel.Name</option>
									}
                                </InputSelect>
                            </div>
                        }
                    </div>
                    
                    <div class="modal-footer">
                        <button class="btn-primary" @onclick="@OnSave">@Localizer[nameof(Dictionary.Save)]</button>
                        <button class="btn-primary" @onclick="@OnCancel">@Localizer[nameof(Dictionary.Cancel)]</button>
                    </div>
                </div>
            </div>
        </div>
}

@code {

    private enum ModalMode
    {
        Add,
        Closed
    }

    private ModalMode _modalMode=ModalMode.Closed;

    private VehicleApiModel? _selectedVehicle;

    public VehicleCreateApiModel modalVehicle { get; set; } = new VehicleCreateApiModel();

    private IList<VehicleApiModel>? _vehicles;
    private IList<VehicleModelApiModel>? _vehicleModels;

    protected  override async Task OnInitializedAsync()
    {
        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleApiModel>>("api/Vehicle");
        _vehicleModels = await  HttpClient.GetFromJsonAsync<IList<VehicleModelApiModel>>("api/VehicleModel");
    }

    private async Task OpenAddPopup()
    {
        modalVehicle = new VehicleCreateApiModel();
        _modalMode = ModalMode.Add;
    }

    private async Task OnDelete(VehicleApiModel vehicle)
    {
        var popupResult = await JSRuntime.InvokeAsync<bool>
            ("confirm", $"{Localizer.GetString("DeleteConfirmation")} {vehicle.Immatriculation} ?");

        if (popupResult == true)
        {
            var httpStatus = await HttpClient.DeleteAsync($"api/Vehicle/{vehicle.Id}");
            if (!httpStatus.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
            }
        }

        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleApiModel>>("api/Vehicle");
    }

    private async Task OnCancel()
    {
        _modalMode = ModalMode.Closed;
    }

    private async Task OnSave()
    {
        switch (_modalMode)
        {
            case ModalMode.Add:
                await OnAdd();
                break;
        }
    }

    private async Task OnAdd()
    {
        var newVehicle = new
        {
            immatriculation = modalVehicle.Immatriculation,
            year = modalVehicle.Year,
            kilometers = modalVehicle.Kilometers,
            fuelType = modalVehicle.FuelType,
            vehicleModelId = modalVehicle.VehicleModelId
 		};
        JsonContent content = JsonContent.Create(newVehicle);
        var httpStatus=await HttpClient.PostAsync($"api/Vehicle", content);
        if (!httpStatus.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
        }

        _modalMode = ModalMode.Closed;

        _vehicles = await HttpClient.GetFromJsonAsync<IList<VehicleApiModel>>("api/Vehicle");
    }

}