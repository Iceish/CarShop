@page "/vehicles/details/{VehicleId:int}"
@using Shared.ApiModels
@using Shared.Enums
@using Microsoft.Extensions.Localization
@using Client.Translations
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Dictionary> Localizer
@inject NavigationManager NavigationManager

<PageTitle>@Localizer[nameof(Dictionary.Vehicle)]</PageTitle>

@if(Vehicle == null)
{
    <h1>@Localizer[nameof(Dictionary.Vehicle)]</h1>

    <p><em>@Localizer[nameof(Dictionary.Loading)]...</em></p>
}
else
{
    <h1>@Localizer[nameof(Dictionary.Vehicle)] - @Vehicle.Immatriculation</h1>

    <div class="d-flex flex-column">
        <label for="modal-name">@Localizer[nameof(Dictionary.Registration)]</label>
        <input id="modal-name" @bind="@Vehicle.Immatriculation" placeholder="AA-111-AA" />

        <label for="modal-year">@Localizer[nameof(Dictionary.Year)]</label>
        <input id="modal-year" @bind="@Vehicle.Year" placeholder="2010" />

        <label for="modal-kilometers">@Localizer[nameof(Dictionary.Kilometers)]</label>
        <input id="modal-kilometers" @bind="@Vehicle.Kilometers" placeholder="10500" />

        <label for="modal-fueltype">@Localizer[nameof(Dictionary.FuelType)]</label>
        <InputSelect id="modal-fueltype" @bind-Value="@Vehicle.FuelType">
            @foreach (var fuelType in Enum.GetValues(typeof(VehicleFuelType)))
            {
                <option value="@fuelType">@fuelType</option>
            }
        </InputSelect>

        <label for="modal-vehiclemodel">@Localizer[nameof(Dictionary.Model)]</label>
        <InputSelect id="modal-vehiclemodel" @bind-Value="@Vehicle.VehicleModelId">
            @foreach (var vehicleModel in _vehicleModels)
            {
                <option value="@vehicleModel.Id">@vehicleModel.Brand @vehicleModel.Name</option>
            }
        </InputSelect>

        <button class="btn-primary" @onclick="@OnUpdate">@Localizer[nameof(Dictionary.Update)]</button>

    </div>
}

@code {

    [Parameter]
    public int VehicleId { get; set; }

    private VehicleApiModel? Vehicle;
    private IList<VehicleModelApiModel>? _vehicleModels;

    protected  override async Task OnInitializedAsync()
    {
        Vehicle = await HttpClient.GetFromJsonAsync<VehicleApiModel>($"api/Vehicle/{VehicleId}");
        _vehicleModels = await HttpClient.GetFromJsonAsync<IList<VehicleModelApiModel>>("api/VehicleModel");
    }

    private async Task OnUpdate()
    {
        var newVehicle = new
        {
            immatriculation = Vehicle.Immatriculation,
            year = Vehicle.Year,
            kilometers = Vehicle.Kilometers,
            fuelType = Vehicle.FuelType,
            vehicleModelId = Vehicle.VehicleModelId
        };
        JsonContent content = JsonContent.Create(newVehicle);
        var httpStatus = await HttpClient.PutAsync($"api/Vehicle/{Vehicle.Id}", content);
        if (!httpStatus.IsSuccessStatusCode)
        {
            await JSRuntime.InvokeVoidAsync("alert", httpStatus.ReasonPhrase);
        }
        NavigationManager.NavigateTo("/vehicles");
    }
}